//  ManifestLoader.swift
//  BrainHub
//  Loads manifest JSON files from bundle and produces planned SQL.
//  Generated by assistant.

import Foundation
import Combine

protocol SQLExecutor { func execute(sql: String) throws }
struct NoOpExecutor: SQLExecutor { func execute(sql: String) throws { print("[NoOpExecutor] SQL -> \(sql)") } }

final class ManifestLoader: ObservableObject {
    @Published private(set) var manifests: [HubManifest] = []
    private let executor: SQLExecutor
    init(executor: SQLExecutor = NoOpExecutor()) { self.executor = executor }

    func load(_ names: [String]) {
        var loaded: [HubManifest] = []
        let decoder = JSONDecoder()
        for name in names {
            if let url = Bundle.main.url(forResource: name, withExtension: "json") {
                do { let data = try Data(contentsOf: url); let m = try decoder.decode(HubManifest.self, from: data); loaded.append(m) } catch { print("[ManifestLoader] Decode fail \(name): \(error)") }
            } else {
                // Fallback embedded manifest so dev builds still function without resource copies.
                if let embedded = embeddedManifest(named: name) { loaded.append(embedded) } else { print("[ManifestLoader] Missing \(name).json and no embedded fallback") }
            }
        }
        manifests = loaded
    }

    private func embeddedManifest(named: String) -> HubManifest? {
        switch named {
        case "health":
            return HubManifest(hub_key: "health", title: "Health Data Hub", manifest_version: 1, tables: nil, views: nil, retrieval: RetrievalConfig(alpha: 0.6, stoplist: ["the","a","and"], synonyms: ["hrv":["heart rate variability"],"bp":["blood pressure"]]), ui: UIConfig(default_views: ["Search"]))
        case "papers":
            return HubManifest(hub_key: "papers", title: "Medical Papers Hub", manifest_version: 1, tables: nil, views: nil, retrieval: RetrievalConfig(alpha: 0.62, stoplist: ["the","a","and","of"], synonyms: ["rct":["randomized controlled trial"],"ae":["adverse event"]]), ui: UIConfig(default_views: ["Search"]))
        case "api_docs":
            return HubManifest(hub_key: "api_docs", title: "API Documentation Hub", manifest_version: 1, tables: nil, views: nil, retrieval: RetrievalConfig(alpha: 0.58, stoplist: ["the","a","and","for"], synonyms: ["oauth":["o auth"],"authn":["authentication"],"authz":["authorization"]]), ui: UIConfig(default_views: ["Search"]))
        default:
            return nil
        }
    }

    func applyMigrations() {
        for m in manifests { for stmt in m.plannedSQL() { try? executor.execute(sql: stmt.sql) } }
    }

    func manifest(key: String) -> HubManifest? { manifests.first { $0.hub_key == key } }
}

// Usage Example:
// let loader = ManifestLoader(); loader.load(["health","papers","api_docs"]); loader.applyMigrations()
