//  ManifestModels.swift
//  BrainHub
//  Data models representing Hub manifests (JSON).
//  Generated by assistant.

import Foundation

struct HubManifest: Codable, Identifiable, Hashable {
    var hub_key: String
    var title: String
    var manifest_version: Int
    var tables: [TableDef]? = []
    var views: [ViewDef]? = []
    var retrieval: RetrievalConfig? = nil
    var ui: UIConfig? = nil
    var automations: [AutomationDef]? = []
    var id: String { hub_key }
}

struct TableDef: Codable, Hashable { let name: String; let cols: [[String]] }
struct ViewDef: Codable, Hashable { let name: String; let sql: String }

struct RetrievalConfig: Codable, Hashable { let alpha: Double?; let stoplist: [String]?; let synonyms: [String:[String]]? }
struct UIConfig: Codable, Hashable { let default_views: [String]? }

struct AutomationDef: Codable, Hashable {
    struct Action: Codable, Hashable { let type: String; let budget_tokens: Int?; let target: String?; let model: String? }
    let trigger: String
    let actions: [Action]
}

struct PlannedSQL: Hashable { enum StatementType { case createTable, createView }; let type: StatementType; let sql: String }

extension HubManifest {
    func plannedSQL() -> [PlannedSQL] {
        var out: [PlannedSQL] = []
        if let tables { for t in tables { let cols = t.cols.compactMap { $0.count >= 2 ? "\($0[0]) \($0[1])" : nil }.joined(separator: ", "); out.append(.init(type: .createTable, sql: "CREATE TABLE IF NOT EXISTS \(t.name)(\(cols));")) } }
        if let views { for v in views { out.append(.init(type: .createView, sql: "CREATE VIEW IF NOT EXISTS \(v.name) AS \(v.sql);")) } }
        return out
    }
}
